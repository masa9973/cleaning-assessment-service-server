








enum ErrorCode {
  chillnnTraining_400_badRequest
  chillnnTraining_401_notSignIn
  chillnnTraining_404_resourceNotFound
  chillnnTraining_500_systemError
}

type HotelMast {
  hotelID: ID!
  hotelName: String!
}

input HotelMastInput {
  hotelID: ID!
  hotelName: String!
}

type Mutation {
  addHotel(input: HotelMastInput!): HotelMast!
  addRecord(input: RecordMastInput!): RecordMast!
  addRoom(input: RoomMastInput!): RoomMast!
  addScore(input: ScoreMastInput!): ScoreMast!
  updateRecord(input: RecordMastInput!): RecordMast!
  updateUserMast(input: UserMastInput!): UserMast!
}

type Query {
  fetchAllRecordsByHotelID(hotelID: ID!): [RecordMast!]!
  fetchAllUserByHotelID(hotelID: ID!): [UserMast!]!
  fetchHotelByHotelID(hotelID: ID!): RecordMast
  fetchMyUserMast: UserMast
  fetchRecordsByCleanerID(userID: ID!): [RecordMast!]!
  fetchRecordsByRoomID(cleaningRoomID: ID!): [RecordMast!]!
  fetchRoomsByHotelID(hotelID: ID!): [RoomMast!]!
  fetchScoresByRecordID(recordID: ID!): [ScoreMast!]!
  fetchUserMastByUserID(userID: ID!): UserMast
}

type RecordMast {
  cleanerID: ID!
  cleaningRoomID: ID!
  cleaningTime: Int!
  createdAt: AWSTimestamp!
  finishedAt: AWSTimestamp!
  ifScored: Boolean!
  recordHotelID: ID!
  recordID: ID!
  startAt: AWSTimestamp!
}

input RecordMastInput {
  cleanerID: ID!
  cleaningRoomID: ID!
  cleaningTime: Int!
  createdAt: AWSTimestamp!
  finishedAt: AWSTimestamp!
  ifScored: Boolean!
  recordHotelID: ID!
  recordID: ID!
  startAt: AWSTimestamp!
}

enum Role {
  cleaner
  manager
}

type RoomMast {
  createdAt: AWSTimestamp!
  roomHotelID: ID!
  roomIcon: S3Object
  roomID: ID!
  roomName: String!
}

input RoomMastInput {
  createdAt: AWSTimestamp!
  roomHotelID: ID!
  roomIcon: S3ObjectInput
  roomID: ID!
  roomName: String!
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

type ScoreMast {
  createdAt: AWSTimestamp!
  recordID: ID!
  score: Int!
  scoreID: ID!
  scorerUserID: ID!
}

input ScoreMastInput {
  createdAt: AWSTimestamp!
  recordID: ID!
  score: Int!
  scoreID: ID!
  scorerUserID: ID!
}

type UserMast {
  createdAt: AWSTimestamp!
  email: String!
  name: String!
  role: String!
  updatedAt: AWSTimestamp!
  userHotelID: ID
  userIcon: S3Object
  userID: ID!
}

input UserMastInput {
  createdAt: AWSTimestamp!
  email: String!
  name: String!
  role: String!
  updatedAt: AWSTimestamp!
  userHotelID: ID
  userIcon: S3ObjectInput
  userID: ID!
}
