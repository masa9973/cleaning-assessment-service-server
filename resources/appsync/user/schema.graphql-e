








enum ErrorCode {
  chillnnTraining_400_badRequest
  chillnnTraining_401_notSignIn
  chillnnTraining_404_resourceNotFound
  chillnnTraining_500_systemError
  chillnnTraining_code_mismatch
  chillnnTraining_email_already_exists
  chillnnTraining_user_not_confirmed
}

type HotelMast {
  hotelID: ID!
  hotelName: String!
}

input HotelMastInput {
  hotelID: ID!
  hotelName: String!
}

type Mutation {
  addHotel(input: HotelMastInput!): HotelMast!
  addRecord(input: RecordMastInput!): RecordMast!
  addRoom(input: RoomMastInput!): RoomMast!
  addScore(input: ScoreMastInput!): ScoreMast!
  addScoreItem(input: ScoreItemMastInput!): ScoreItemMast!
  addTestRecord(input: RecordMastInput!): RecordMast!
  deleteRoom(roomID: ID!): RoomMast!
  deleteScoreItem(scoreItemID: ID!): ScoreItemMast!
  updateRecord(input: RecordMastInput!): RecordMast!
  updateScore(input: ScoreMastInput!): ScoreMast!
  updateUserMast(input: UserMastInput!): UserMast!
}

type Query {
  fetchAllRecordsByHotelID(recordHotelID: ID!): [RecordMast!]!
  fetchAllUserByHotelID(userHotelID: ID!): [UserMast!]!
  fetchHotelByHotelID(hotelID: ID!): HotelMast
  fetchMyUserMast: UserMast
  fetchRecordByRecordID(recordID: ID!): RecordMast
  fetchRecordsByCleanerID(cleanerID: ID!): [RecordMast!]!
  fetchRecordsByDate(recordDate: String!, recordHotelID: ID!): [RecordMast!]!
  fetchRecordsByRoomID(cleaningRoomID: ID!): [RecordMast!]!
  fetchRoomByRoomID(roomID: ID!): RoomMast
  fetchRoomsByHotelID(roomHotelID: ID!): [RoomMast!]!
  fetchScoreItemByScoreItemID(scoreItemID: ID!): ScoreItemMast
  fetchScoreItemsByHotelID(scoreItemHotelID: ID!): [ScoreItemMast!]!
  fetchScoresByRecordID(recordID: ID!): [ScoreMast!]!
  fetchScoresByScoreItemID(scoreItemID: ID!): [ScoreMast!]!
  fetchTermRecordsByCleanerIDAndRoomID(cleanerID: ID!, cleaningRoomID: ID!, from: String!, to: String!): [RecordMast!]!
  fetchTermScoresByCleanerIDAndRoomID(from: String!, scoreCleanerID: ID!, scoreRoomID: ID!, to: String!): [ScoreMast!]!
  fetchUserMastByUserID(userID: ID!): UserMast
}

type RecordMast {
  cleanerID: ID!
  cleaningRoomID: ID!
  cleaningTime: Int!
  createdAt: AWSTimestamp!
  finishedAt: AWSTimestamp!
  ifScored: Boolean!
  recordDate: String!
  recordHotelID: ID!
  recordID: ID!
  startAt: AWSTimestamp!
}

input RecordMastInput {
  cleanerID: ID!
  cleaningRoomID: ID!
  cleaningTime: Int!
  createdAt: AWSTimestamp!
  finishedAt: AWSTimestamp!
  ifScored: Boolean!
  recordDate: String!
  recordHotelID: ID!
  recordID: ID!
  startAt: AWSTimestamp!
}

enum Role {
  cleaner
  manager
}

type RoomMast {
  createdAt: AWSTimestamp!
  roomHotelID: ID!
  roomIcon: S3Object
  roomID: ID!
  roomName: String!
}

input RoomMastInput {
  createdAt: AWSTimestamp!
  roomHotelID: ID!
  roomIcon: S3ObjectInput
  roomID: ID!
  roomName: String!
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
  url: AWSURL!
}

type ScoreItemMast {
  createdAt: AWSTimestamp!
  scoreItemHotelID: ID!
  scoreItemID: ID!
  scoreItemName: ID!
}

input ScoreItemMastInput {
  createdAt: AWSTimestamp!
  scoreItemHotelID: ID!
  scoreItemID: ID!
  scoreItemName: ID!
}

type ScoreMast {
  createdAt: AWSTimestamp!
  recordID: ID!
  score: Int!
  scoreCleanerID: ID!
  scoreID: ID!
  scoreItemID: ID!
  scoreRoomID: ID!
  scorerUserID: ID!
}

input ScoreMastInput {
  createdAt: AWSTimestamp!
  recordID: ID!
  score: Int!
  scoreCleanerID: ID!
  scoreID: ID!
  scoreItemID: ID!
  scoreRoomID: ID!
  scorerUserID: ID!
}

type UserMast {
  createdAt: AWSTimestamp!
  email: String!
  name: String!
  role: String!
  updatedAt: AWSTimestamp!
  userHotelID: ID!
  userIcon: S3Object
  userID: ID!
}

input UserMastInput {
  createdAt: AWSTimestamp!
  email: String!
  name: String!
  role: String!
  updatedAt: AWSTimestamp!
  userHotelID: ID!
  userIcon: S3ObjectInput
  userID: ID!
}
